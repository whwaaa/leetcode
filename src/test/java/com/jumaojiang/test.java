package com.jumaojiang;

import java.math.BigDecimal;

public class test {

    public static void main(String[] args) {
        // 电费
        float acount = 1;
        float gonglv = 30;
        // 电费 = 用电量 * 电价
        // 电费 = 功率(w) * 时间(h)
        float dianfei = 40 / 1000 * 5;
        System.out.println(dianfei);
//        int num = 5;    // 00001001
//        System.out.println(Integer.bitCount(0));
//        System.out.println(bitCount(15));
    }


    public static int bitCount(int i) {
        // HD, Figure 5-2
        // >>> 无符号右移,无论是整数负数左边都不零  相比之下 >> 为有符号右移,正数右移左侧补0,负数右移左侧补1
        // 0x55555555 : 01010101 01010101 01010101 01010101
        // 0x33333333 : 00110011 00110011 00110011 00110011
        // 0x0f0f0f0f : 00001111 00001111 00001111 00001111
        // 例: bitCount(11111111 11111111 11111111 00000000)
        // ```i = i - ((i >>> 1) & 0x55555555);```
        //    i = 11111111 11111111 11111111 00000000 - ((11111111 11111111 11111111 00000000 >>> 1) & 01010101 01010101 01010101 01010101)
        //    i = 11111111 11111111 11111111 00000000 - ( 01111111 11111111 11111111 10000000) & 01010101 01010101 01010101 01010101)
        //    i = 11111111 11111111 11111111 00000000 -   01010101 01010101 01010101 00000000
        //    i = 10101010 10101010 10101010 00000000
        //
        // ```i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);```
        //    i = (10101010 10101010 10101010 00000000 & 00110011 00110011 00110011 00110011) + ((10101010 10101010 10101010 00000000 >> 2) & 00110011 00110011 00110011 00110011)
        //    i =  00100010 00100010 00100010 00000000 + 00100010 00100010 00100010 00000000
        //    i =
        i = i - ((i >>> 1) & 0x55555555);
        i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);
        i = (i + (i >>> 4)) & 0x0f0f0f0f;
        i = i + (i >>> 8);
        i = i + (i >>> 16);
        return i & 0x3f;
    }
}
